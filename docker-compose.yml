services:
  database:
    image: postgres:17
    container_name: database
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_HOST=${DB_HOST}
      - POSTGRES_PORT=${DB_PORT}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/database.sql:/docker-entrypoint-initdb.d/database.sql
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  fast_backend_api:
    build:
      context: .
      dockerfile: deployment/image/Dockerfile
    container_name: backend_api
    # ports:
    #   - 5002:5002
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - app_network
    depends_on:
      - database
    volumes:
      - .:/app

  redis:
    image: redis/redis-stack-server:latest
    restart: unless-stopped
    ports:
      - 6377:6379
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
    env_file:
      - .env
    environment:
      REDIS_ARGS: "--requirepass ${REDIS_PASSWORD} --appendonly yes"
    volumes:
      - redis:/data
    networks:
      - app_network

  redis_cleanup:
    image: redis:latest
    command: ["redis-cli", "-h", "redis", "-a", "${REDIS_PASSWORD}", "FLUSHALL"]
    depends_on:
      - redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - app_network

volumes:
  redis:
  postgres_data:
    driver: local

networks:
  app_network:
    driver: bridge
